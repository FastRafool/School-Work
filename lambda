import os
import json
import boto3
from aws_lambda_powertools import Logger, Tracer
from aws_lambda_powertools.utilities.data_classes import APIGatewayProxyEvent
from aws_lambda_powertools.event_handler.api_gateway import Router

tracer = Tracer()
router = Router()
logger = Logger()

# Setup DynamoDB
dynamodb = boto3.resource("dynamodb")
table_name = os.getenv("SUBSCRIBERS_TABLE_NAME", "arxival-newsletter-subs")
table = dynamodb.Table(table_name)

@router.post("/subscribe")
@tracer.capture_method
def subscribe():
    event = APIGatewayProxyEvent(router.current_event)
    request_data = json.loads(event.body)

    # Log the received data
    logger.info(f"Received subscription data: {request_data}")

    # Extract data directly without using pydantic for simplicity
    email = request_data.get('email', '')
    frequency = request_data.get('preferences', {}).get('frequency', '')
    keywords = request_data.get('preferences', {}).get('keywords', [])

    # Insert data into DynamoDB
    try:
        response = table.put_item(Item={
            "email": email,
            "frequency": frequency,
            "keywords": keywords
        })
        logger.info(f"Subscription added successfully: {response}")
        return {"statusCode": 200, "body": json.dumps({"message": "Subscription successful"})}
    except Exception as e:
        logger.error(f"Error adding subscription: {str(e)}")
        return {"statusCode": 500, "body": json.dumps({"message": "Failed to add subscription"})}

def lambda_handler(event, context):
    return router.resolve(event, context)

