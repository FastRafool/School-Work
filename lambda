import os
import boto3
from aws_lambda_powertools.utilities.data_classes import APIGatewayProxyEvent
from aws_lambda_powertools.utilities.parser import parse, ValidationError
from aws_lambda_powertools import Logger, Tracer
from aws_lambda_powertools.event_handler.api_gateway import ApiGatewayResolver

tracer = Tracer()
logger = Logger()
app = ApiGatewayResolver()

dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table(os.environ.get("SUBSCRIBERS_TABLE_NAME", "arxival-newsletter-subs"))

class Preferences:
    frequency: str
    keywords: list

class SubscriptionRequest:
    email: str
    preferences: Preferences

@app.post("/subscribe")
@tracer.capture_method
def subscribe():
    try:
        parsed_body = parse(event=app.current_event.json_body, model=SubscriptionRequest)
        response = table.put_item(Item={
            "email": parsed_body.email,
            "frequency": parsed_body.preferences.frequency,
            "keywords": parsed_body.preferences.keywords
        })
        logger.info(f"Subscription added: {response}")
        return app.make_response({"message": "Subscription successful"}, status_code=200)
    except ValidationError as e:
        logger.error(f"Validation error: {e}")
        return app.make_response({"message": "Invalid request data"}, status_code=400)
    except Exception as e:
        logger.error(f"Error processing subscription: {e}")
        return app.make_response({"message": "Internal server error"}, status_code=500)

def lambda_handler(event, context):
    return app.resolve(event, context)
