import os
import uuid
import boto3
from datetime import datetime
from pydantic import BaseModel
from aws_lambda_powertools import Logger, Tracer
from aws_lambda_powertools.event_handler.api_gateway import Router
from aws_lambda_powertools.utilities.data_classes import APIGatewayProxyEvent

tracer = Tracer()
router = Router()
logger = Logger()

dynamodb = boto3.resource("dynamodb")
SUBSCRIBERS_TABLE_NAME = os.environ.get("SUBSCRIBERS_TABLE_NAME", "arxival-newsletter-subs")


class SubscriptionRequest(BaseModel):
    email: str
    preferences: list


@router.post("/subscribe")
@tracer.capture_method
def subscribe():
    event = APIGatewayProxyEvent(router.current_event)
    subscription_data = SubscriptionRequest(**event.json_body)

    table = dynamodb.Table(SUBSCRIBERS_TABLE_NAME)
    timestamp = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%S.%fZ")

    response = table.put_item(Item={
        "email": subscription_data.email,
        "preferences": subscription_data.preferences,
        "subscription_date": timestamp
    })

    logger.info(f"Subscription added: {response}")
    return {"ok": True, "message": "Subscription successful"}

# Additional router methods for updating and deleting subscriptions as needed.

def handler(event, context):
    return router.resolve(event, context)
