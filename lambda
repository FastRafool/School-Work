import os
import boto3
from pydantic import BaseModel, EmailStr
from aws_lambda_powertools import Logger, Tracer
from aws_lambda_powertools.event_handler.api_gateway import Router
from aws_lambda_powertools.utilities.data_classes import APIGatewayProxyEvent

tracer = Tracer()
router = Router()
logger = Logger()

dynamodb = boto3.resource("dynamodb")
SUBSCRIBERS_TABLE_NAME = os.environ.get("SUBSCRIBERS_TABLE_NAME", "arxival-newsletter-subs")

class Preferences(BaseModel):
    frequency: str
    keywords: list

class SubscriptionRequest(BaseModel):
    email: EmailStr
    preferences: Preferences

@router.post("/subscribe")
@tracer.capture_method
def subscribe():
    event = APIGatewayProxyEvent(router.current_event)
    subscription_data = SubscriptionRequest(**event.json_body)

    table = dynamodb.Table(SUBSCRIBERS_TABLE_NAME)

    # Store subscription data into DynamoDB
    response = table.put_item(Item={
        "email": subscription_data.email,
        "frequency": subscription_data.preferences.frequency,
        "keywords": subscription_data.preferences.keywords
    })

    logger.info(f"Subscription added: {response}")
    return {"ok": True, "message": "Subscription successful"}

def handler(event, context):
    return router.resolve(event, context)
