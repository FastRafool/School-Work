import os
import boto3
from pydantic import BaseModel, ValidationError
from aws_lambda_powertools import Logger, Tracer
from aws_lambda_powertools.event_handler.api_gateway import Router
from aws_lambda_powertools.utilities.data_classes import APIGatewayProxyEvent

tracer = Tracer()
router = Router()
logger = Logger()

dynamodb = boto3.resource("dynamodb")
SUBSCRIBERS_TABLE_NAME = os.environ.get("SUBSCRIBERS_TABLE_NAME", "arxival-newsletter-subs")

class Preferences(BaseModel):
    frequency: str
    keywords: list

class SubscriptionRequest(BaseModel):
    email: str  # Reverted back to plain string type
    preferences: Preferences

@router.post("/subscribe")
@tracer.capture_method
def subscribe():
    event = APIGatewayProxyEvent(router.current_event)
    try:
        subscription_data = SubscriptionRequest(**event.json_body)
    except ValidationError as e:
        logger.error(f"Validation error: {str(e)}")
        return {"statusCode": 400, "body": "Invalid request data"}

    # Basic email format validation
    if "@" not in subscription_data.email:
        return {"statusCode": 400, "body": "Invalid email format"}

    table = dynamodb.Table(SUBSCRIBERS_TABLE_NAME)

    # Store subscription data into DynamoDB
    try:
        response = table.put_item(Item={
            "email": subscription_data.email,
            "frequency": subscription_data.preferences.frequency,
            "keywords": subscription_data.preferences.keywords
        })
        logger.info(f"Subscription added: {response}")
        return {"statusCode": 200, "body": "Subscription successful"}
    except Exception as e:
        logger.error(f"Error adding subscription: {str(e)}")
        return {"statusCode": 500, "body": "Failed to add subscription"}

def lambda_handler(event, context):
    return router.resolve(event, context)
