Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'data' is not defined
>>> 
>>> # Set the random seed for reproducibility
>>> random.seed(1)
>>> 
>>> # Generate the initial population
>>> pop = toolbox.population(n=100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: 'Toolbox' object has no attribute 'population'
>>> 
>>> # Perform the NSGA-II algorithm for 2 generations
>>> algorithms.eaSimple(pop, toolbox, cxpb=0.5, mutpb=0.2, ngen=2, verbose=False)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pop' is not defined
>>> 
>>> # Extract the best individuals (food combinations) from the final population 
>>> best_individuals = tools.selBest(pop, k=5)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'pop' is not defined
>>> 
>>> def run_algorithm():
...     results = []
...     for i, individual in enumerate(best_individuals):
...         result = f"Meal plan {i+1}:\n"
...         total_protein, total_calories, total_fat, total_carbs, total_sodium, total_price = evaluate(individual)
...         for index in individual:
...             result += f"ASIN: {data.loc[index, 'asin']}, Category: {data.loc[index, 'Category']}\n"
...         result += f"Average daily protein: {total_protein / 7}\n"
...         result += f"Average daily calories: {total_calories / 7}\n"
...         result += f"Average daily fat: {total_fat / 7}\n"
...         result += f"Average daily sodium: {total_sodium / 7}\n"
...         result += f"Average daily carbohydrates: {total_carbs / 7}\n"
...         result += f"Total price: {total_price}\n"
...         results.append(result)
...     messagebox.showinfo("Results", "\n".join(results))
... 
>>> root = tk.Tk()
DEPRECATION WARNING: The system version of Tk is deprecated and may be removed in a future release. Please don't rely on it. Set TK_SILENCE_DEPRECATION=1 to suppress this warning.
>>> button = tk.Button(root, text="Run algorithm", command=run_algorithm)
>>> button.pack()
>>> root.mainloop()


